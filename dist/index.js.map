{"version":3,"sources":["../node_modules/dotenv/package.json","../node_modules/dotenv/lib/main.js","../src/index.ts","../src/templates/index.ts","../src/config/env.keys.ts","../src/config/sendgrid.ts","../src/libs/sendgrid.lib.ts"],"sourcesContent":["{\n  \"name\": \"dotenv\",\n  \"version\": \"16.4.5\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"lint-readme\": \"standard-markdown\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap tests/*.js --100 -Rspec\",\n    \"test:coverage\": \"tap --coverage-report=lcov\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"funding\": \"https://dotenvx.com\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@definitelytyped/dtslint\": \"^0.0.133\",\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.1\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-markdown\": \"^7.1.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^16.3.0\",\n    \"tar\": \"^6.1.11\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n","const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","import SendGridType from './model/sendgrid.interface'\nimport EmailTemplates from './templates'\nimport SendGrid from './libs/sendgrid.lib'\n\n// Send Email Type\ntype SendEmailType = 'one' | 'many' | 'all'\n\nclass EmailerEngine {\n  singleEmail = 'chrisdevenv@gmail.com'\n  smallBatch: string[] = []\n  largeBatch: string[] = []\n\n  constructor(readonly service: typeof SendGridType = SendGrid) {}\n\n  ///* ----------------- SEND EMAIL ----------------- */\n  /// -----------------------------------------------\n  send = async (\n    sendType: SendEmailType,\n    template: {\n      html: string\n      subject: string\n    },\n  ) => {\n    try {\n      switch (sendType) {\n        case 'many':\n          // ---------------- SEND MULTIPLE TEST EMAILS ----------------\n          const emails = this.smallBatch\n\n          await this.service.sendSmallBatch(\n            emails,\n            template.subject,\n            template.html,\n          )\n          console.log('Emails sent')\n          break\n        case 'one':\n          // ---------------- SEND ONE EMAIL ----------------\n          await this.service.sendSingleEmail(\n            this.singleEmail,\n            template.subject,\n            template.html,\n          )\n          console.log('Email sent')\n          break\n        case 'all':\n          // ---------------- SEND ALL EMAILS ----------------\n          try {\n            await this.service.sendLargeBatch(\n              template.subject,\n              template.html,\n              this.largeBatch,\n            )\n          } catch (err) {\n            console.log('Error sending emails')\n            console.log(err)\n          }\n          console.log('Emails sent')\n          break\n        default:\n          console.log('Invalid sendType')\n          break\n      }\n    } catch (err) {\n      console.log(err)\n      return err\n    }\n  }\n}\n\nexport { EmailerEngine, EmailTemplates, SendGrid }\n\n//* ---- SEND EMAIL TEST ----\n// const t = async () => {\n//   const service = new EmailerEngine(SendGrid)\n//   service.singleEmail = 'test@test.com'\n//   // service.smallBatch = ['test@test.com']\n//   // service.largeBatch = ['test@test.com']   // Intended for amounts over 1000\n//   service.send('one', await EmailTemplates.getTemplate001())\n// }\n// t()\n","import fs from 'fs'\nimport path from 'node:path'\nimport mjml2html from 'mjml'\nimport handleBars from 'handlebars'\nconst { compile } = handleBars\n\nconst loadviewfromfile = (\n  filename: string,\n): HandlebarsTemplateDelegate<any> => {\n  const fullPath = path.join(__dirname, filename)\n  try {\n    const view = fs.readFileSync(fullPath, 'utf8')\n    const template = compile(view)\n    return template\n  } catch (err) {\n    console.log(err)\n    throw err\n  }\n}\n\nexport default class EmailTemplates {\n  //**** ------- TEMPLATE 001 ------- ****\n  // Advice Market - Questions and Consultation are now free\n  // Black background with white text and blue button that opens the app\n  static getTemplate001 = async () => {\n    const subject = `Free Advice Market Features`\n    // Compile the template\n    const template = loadviewfromfile('template_001.mjml')\n    // Content to be injected into the template\n    const context = {\n      offerInfo: '* Offer valid for a limited time',\n      bodyMessage: 'Questions & Consultations are now Free!',\n      bodyHeader: 'Advice Market',\n      titleMessage: 'StockLift',\n      bodySubMessage: 'It has never been faster to connect with an Expert',\n    }\n    // Render the template with the context\n    const mjml = template(context)\n    // Convert mjml to html\n    const html = mjml2html(mjml)\n    if (html.errors.length) {\n      console.error(html.errors)\n    }\n    // Return the html and the subject of the email\n    return { html: html.html, subject }\n  }\n}\n","import { config } from \"dotenv\"\nconfig()\n\nconst SENDGRID_KEY = process.env.SENDGRID_KEY || \"\"\n\nexport { SENDGRID_KEY }\n","import { SENDGRID_KEY } from \"./env.keys\"\nimport sgMail from \"@sendgrid/mail\"\nsgMail.setApiKey(SENDGRID_KEY)\nexport default sgMail\n","import sendgrid from '../config/sendgrid'\nimport SendGridType from '../model/sendgrid.interface'\nimport _ from 'lodash'\n\n//* SENDGRID LIMITS TO 1000 EMAILS PER Request\nexport default class SendGrid implements SendGridType {\n  // ---------------- FROM EMAIL\n  static fromEmail = 'visrule@pm.me'\n  //* MULTLIPLE EMAILS\n  static sendSmallBatch = async (\n    emails: string[],\n    subject: string,\n    html: string,\n  ) => {\n    try {\n      // SENDS multliple and prevents users from seeing each others emails\n      // SENDGRID LIMITS TO 1000 EMAILS PER Request\n      await sendgrid.sendMultiple(SendGrid.makeEmails(emails, subject, html))\n    } catch (err) {\n      console.error(err)\n      console.error('Error sending multiple emails')\n      throw new Error('Error sending multiple emails')\n    }\n  }\n\n  //* SINGLE EMAIL\n  static sendSingleEmail = async (\n    email: string,\n    subject: string,\n    html: string,\n  ) => {\n    try {\n      // await sendgrid.send(SendGrid.makeEmail(email, subject, html))\n    } catch (err) {\n      console.error(err)\n      console.error('Error sending email-sendEmail')\n      throw new Error('Error sending email-sendEmail')\n    }\n  }\n\n  //* SINGLE EMAIL with Attachmentn\n  static sendEmailWAttachment = async (\n    email: string,\n    subject: string,\n    html: string,\n    attachment: string,\n    fileName: string,\n    fileType: string,\n  ) => {\n    try {\n      await sendgrid.send(\n        SendGrid.makeEmailWithAttachment(\n          email,\n          subject,\n          html,\n          attachment,\n          fileName,\n          fileType,\n        ),\n      )\n    } catch (err) {\n      console.error(err)\n      console.error('Error sending email--sendEmailWAttachment')\n      throw new Error('Error sending email--sendEmailWAttachment')\n    }\n  }\n\n  static sendLargeBatch = async (\n    subject: string,\n    html: string,\n    emails: string[],\n  ) => {\n    try {\n      emails = emails.filter(\n        (email) => email !== undefined && email !== '' && email !== null,\n      )\n      // SENDGRID LIMITS TO 1000 EMAILS PER Request\n      // batch email in groups of 1000 to prevent sendgrid error\n      // * will throw an error but ignore it, the emails will still be sent\n      const batches = _.chunk(emails, 500)\n      for (const batch of batches) {\n        await sendgrid.sendMultiple(SendGrid.makeEmails(batch, subject, html))\n      }\n    } catch (err) {\n      console.error(err)\n      console.error('Error sending email--sendToAllUsers')\n    }\n  }\n\n  // ----------------- EMAIL MAKER\n  static makeEmailWithAttachment = (\n    email: string,\n    subject: string,\n    html: string,\n    attachment: string,\n    fileName: string,\n    fileType: string,\n  ) => {\n    return {\n      to: email,\n      from: this.fromEmail,\n      subject: subject,\n      text: subject,\n      html: html,\n      attachments: [\n        {\n          content: attachment,\n          filename: fileName,\n          type: `application/${fileType}`,\n          disposition: 'attachment',\n        },\n      ],\n    }\n  }\n\n  // ----------------- EMAIL MAKER\n  static makeEmail = (email: string, subject: string, html: string) => {\n    return {\n      to: email,\n      from: this.fromEmail,\n      subject: subject,\n      text: subject,\n      html: html,\n    }\n  }\n\n  // ----------------- EMAIL MAKER\n  static makeEmails = (emails: string[], subject: string, html: string) => {\n    return {\n      to: emails,\n      from: this.fromEmail,\n      subject: subject,\n      text: subject,\n      html: html,\n    }\n  }\n}\n"],"mappings":"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","names":["exports","module","exports","module","fs","path","config","handleBars","path","fs","mjml2html","sgMail","_"]}